{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Italic;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red31\green31\blue36;\red253\green143\blue63;\red252\green106\blue93;
\red108\green121\blue134;\red252\green95\blue163;\red255\green255\blue255;\red122\green200\blue182;\red150\green134\blue245;
\red145\green212\blue98;\red153\green232\blue213;\red174\green243\blue125;}
{\*\expandedcolortbl;;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c99131\c56076\c24611;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c47716\c78607\c71403;\csgenericrgb\c58752\c52717\c95948;
\csgenericrgb\c56799\c83212\c38450;\csgenericrgb\c59926\c90967\c83488;\csgenericrgb\c68215\c95290\c48909;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \cb2 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf3 #include \cf4 <iostream>
\f0 \cf0 \

\f1 \cf3 #include \cf4 <cmath>
\f0 \cf0 \

\f1 \cf3 #include \cf4 <vector>
\f0 \cf0 \

\f1 \cf3 #include \cf4 <iomanip>\cf3  
\f2\i \cf5 // so that we can use setprecision
\f0\i0 \cf0 \

\f3\b \cf6 using
\f1\b0 \cf7  
\f3\b \cf6 namespace
\f1\b0 \cf7  \cf8 std\cf7 ;
\f0 \cf0 \
\

\f3\b \cf6 template
\f1\b0 \cf7  <
\f3\b \cf6 typename
\f1\b0 \cf7  F>
\f0 \cf0 \

\f3\b \cf6 double
\f1\b0 \cf7  step_rk4(
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  t0, 
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  y0,
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  h, F f) \{ 
\f2\i \cf5 // this can accept arbitary functions with                                                                                             different numbers of parameters
\f0\i0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  k1 = f(y0, t0);
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  k2 = f(y0+h/\cf9 2.0\cf7 *k1, t0+h/\cf9 2.0\cf7 );
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  k3 = f(y0+h/\cf9 2.0\cf7 *k2, t0+h/\cf9 2.0\cf7 );
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  k4 = f(y0+h*k3, t0+h);
\f0 \cf0 \

\f1 \cf7     
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 return
\f1\b0 \cf7  y0 + h/\cf9 6.0\cf7 *(k1 + \cf9 2.0\cf7 *k2 + \cf9 2.0\cf7 *k3 + k4);
\f0 \cf0 \

\f1 \cf7 \}
\f0 \cf0 \
\

\f3\b \cf6 struct
\f1\b0 \cf7  F_exp \{ 
\f2\i \cf5 //this struct or function operator will return the derivative for out exponential example
\f0\i0 \cf0 \

\f1 \cf7     
\f3\b \cf6 double
\f1\b0 \cf7  r;
\f0 \cf0 \

\f1 \cf7     F_exp(
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  r0) : \cf10 r\cf7 (r0) \{\}
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 double
\f1\b0 \cf7  
\f3\b \cf6 operator
\f1\b0 \cf7 ()(
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  y, 
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  t) 
\f3\b \cf6 const
\f1\b0 \cf7  \{
\f0 \cf0 \

\f1 \cf7         
\f3\b \cf6 return
\f1\b0 \cf7  \cf10 r\cf7 *y; 
\f2\i \cf5 // this is what the derivative is equal to
\f0\i0 \cf0 \

\f1 \cf7     \}
\f0 \cf0 \

\f1 \cf7 \};
\f0 \cf0 \
\
\

\f3\b \cf6 int
\f1\b0 \cf7  main() \{
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  t0 = \cf9 1.0\cf7 ;
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  T = \cf9 5.0\cf7 ;
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  y0 = \cf9 2.5\cf7 ;
\f0 \cf0 \

\f1 \cf7     
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  r = \cf9 1.2\cf7 ;
\f0 \cf0 \

\f1 \cf7     \cf10 F_exp\cf7  f(r); 
\f2\i \cf5 // function object -- will run with r=1.2
\f0\i0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  c = y0*\cf11 exp\cf7 (-r*t0); \cf5 ///value of the constant for specific r (actual solution)
\f0 \cf0 \

\f1 \cf7     
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 int
\f1\b0 \cf7  n = \cf9 40\cf7 ; 
\f2\i \cf5 //number of steps
\f0\i0 \cf0 \

\f1 \cf7     
\f3\b \cf6 const
\f1\b0 \cf7  
\f3\b \cf6 double
\f1\b0 \cf7  h = (T-t0)/
\f3\b \cf6 double
\f1\b0 \cf7 (n); 
\f2\i \cf5 //step defn
\f0\i0 \cf0 \

\f1 \cf7     
\f3\b \cf6 double
\f1\b0 \cf7  y = y0;
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 double
\f1\b0 \cf7  t = t0;
\f0 \cf0 \

\f1 \cf7     
\f3\b \cf6 for
\f1\b0 \cf7  (
\f3\b \cf6 int
\f1\b0 \cf7  i = \cf9 0\cf7 ; i<n; i++) \{
\f0 \cf0 \

\f1 \cf7         y = \cf12 step_rk4\cf7 (t, y, h, f); 
\f2\i \cf5 // will get the final value for Y at the end of the loop using our function object to                                                                                                                                          //generate value of the slope (i.e. evaluating the derivative for diff y)
\f0\i0 \cf0 \

\f1 \cf7         t += h;
\f0 \cf0 \

\f1 \cf7     \}
\f0 \cf0 \

\f1 \cf7     \cf8 cout\cf7  << t << \cf4 "\\t"\cf7 << T << \cf11 endl\cf7 ;
\f0 \cf0 \

\f1 \cf7     \cf8 cout\cf7  << \cf4 "Final value:\\n"\cf7 ;
\f0 \cf0 \

\f1 \cf7     \cf8 cout\cf7  << y << \cf11 endl\cf7 ; 
\f2\i \cf5 // approximation
\f0\i0 \cf0 \

\f1 \cf7     \cf8 cout\cf7  << c*\cf11 exp\cf7 (r*T) << \cf11 endl\cf7 ; 
\f2\i \cf5 //actual for the example
\f0\i0 \cf0 \

\f1 \cf7 \}
\f0 \cf0 \
\
}