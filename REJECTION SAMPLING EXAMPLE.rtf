{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red253\green143\blue63;\red31\green31\blue36;\red252\green106\blue93;
\red252\green95\blue163;\red255\green255\blue255;\red122\green200\blue182;\red150\green134\blue245;\red108\green121\blue134;
\red153\green232\blue213;\red174\green243\blue125;}
{\*\expandedcolortbl;;\csgenericrgb\c99131\c56076\c24611;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c47716\c78607\c71403;\csgenericrgb\c58752\c52717\c95948;\csgenericrgb\c42394\c47462\c52518;
\csgenericrgb\c59926\c90967\c83488;\csgenericrgb\c68215\c95290\c48909;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 #include\cf4 <iostream>
\f1 \cf0 \

\f0 \cf2 #include\cf4 <random>
\f1 \cf0 \

\f0 \cf2 #include\cf4 <ctime>
\f1 \cf0 \

\f0 \cf2 #include\cf4 <vector>
\f1 \cf0 \

\f0 \cf2 #include\cf4 <cmath>
\f1 \cf0 \

\f0 \cf2 #include\cf4 <iomanip>
\f1 \cf0 \

\f2\b \cf5 using
\f0\b0 \cf6  
\f2\b \cf5 namespace
\f0\b0 \cf6  \cf7 std\cf6 ;
\f1 \cf0 \
\
\

\f2\b \cf5 double
\f0\b0 \cf6  mean(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v);
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  var(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v);
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  f(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x);
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  g(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x);
\f1 \cf0 \
\

\f2\b \cf5 int
\f0\b0 \cf6  main() \{
\f1 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  s = \cf8 31\cf6 ;
\f1 \cf0 \

\f0 \cf6     \cf7 mt19937_64\cf6  mtrand(s);
\f1 \cf0 \

\f0 \cf6     \cf7 uniform_real_distribution\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 > unif(\cf8 0.0\cf6 , \cf8 1.0\cf6 );
\f1 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f3\i \cf9 // c needs to be at least 30/16 to have f(x) <= c*g(x)
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  c = \cf8 1.875000001\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  n = \cf8 10000\cf6 ;
\f1 \cf0 \

\f0 \cf6     \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 > v(n);
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 int
\f0\b0 \cf6  m = \cf8 0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  i = \cf8 0\cf6 ; i<n; i++) \{
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 bool
\f0\b0 \cf6  accept = 
\f2\b \cf5 false
\f0\b0 \cf6 ;
\f1 \cf0 \

\f0 \cf6         
\f3\i \cf9 // This code generates one value of x
\f1\i0 \cf0 \

\f0 \cf6         
\f3\i \cf9 // as a random variable with pdf f:
\f1\i0 \cf0 \

\f0 \cf6         
\f2\b \cf5 double
\f0\b0 \cf6  x = \cf8 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 do
\f0\b0 \cf6  \{
\f1 \cf0 \

\f0 \cf6             
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  y = unif(\cf10 mtrand\cf6 ); 
\f3\i \cf9 // generate y with pdf g, which here is unif(0, 1)
\f1\i0 \cf0 \

\f0 \cf6             
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  u = unif(\cf10 mtrand\cf6 ); 
\f3\i \cf9 // generate u ~ unif(0, 1) for the acceptance check
\f1\i0 \cf0 \

\f0 \cf6             m++; 
\f3\i \cf9 // this is here just to count the amount of times we will run this do while loop in the whole programme // will tell us the proportion of values that we accept
\f1\i0 \cf0 \

\f0 \cf6             
\f2\b \cf5 if
\f0\b0 \cf6  (u < \cf11 f\cf6 (y)/(c*\cf11 g\cf6 (y))) \{ 
\f3\i \cf9 // if u is less than this ratio then we shall add it to the vector and set the boolean variable 'accept' to true so that we end the do while loop and then run back through the for loop which will in turn run another do while loop to add the next u
\f1\i0 \cf0 \

\f0 \cf6                 accept = 
\f2\b \cf5 true
\f0\b0 \cf6 ;
\f1 \cf0 \

\f0 \cf6                 x = y;
\f1 \cf0 \

\f0 \cf6             \}
\f1 \cf0 \

\f0 \cf6         \} 
\f2\b \cf5 while
\f0\b0 \cf6  (accept == 
\f2\b \cf5 false
\f0\b0 \cf6 );
\f1 \cf0 \

\f0 \cf6         v[\cf10 i\cf6 ] = x;
\f1 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << 
\f2\b \cf5 double
\f0\b0 \cf6 (m)/
\f2\b \cf5 double
\f0\b0 \cf6 (n) << \cf10 endl\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  alpha = \cf8 3.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  beta = \cf8 3.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << alpha/(alpha+beta) << \cf4 "\\t"\cf6  << \cf11 mean\cf6 (v) << \cf10 endl\cf6 ;
\f1 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << alpha*beta/((alpha+beta)*(alpha+beta)*(alpha+beta+\cf8 1.0\cf6 )) << \cf4 "\\t"\cf6  << \cf11 var\cf6 (v) << \cf10 endl\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  f(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 if
\f0\b0 \cf6  (x<\cf8 0.0\cf6  || x>\cf8 1.0\cf6 )
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 return
\f0\b0 \cf6  \cf8 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 else
\f1\b0 \cf0 \

\f0 \cf6         
\f2\b \cf5 return
\f0\b0 \cf6  \cf8 30.0\cf6 *x*x*(\cf8 1\cf6 -x)*(\cf8 1\cf6 -x); 
\f3\i \cf9 // pdf of f
\f1\i0 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  g(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x) \{ 
\f3\i \cf9 // pdf of g (which is in this case is the uniform dist
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 if
\f0\b0 \cf6  (x<\cf8 0.0\cf6  || x>\cf8 1.0\cf6 )
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 return
\f0\b0 \cf6  \cf8 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 else
\f1\b0 \cf0 \

\f0 \cf6         
\f2\b \cf5 return
\f0\b0 \cf6  \cf8 1.0\cf6 ;
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  mean(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  S = \cf8 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  i = \cf8 0\cf6 ; i<v.\cf10 size\cf6 (); i++)
\f1 \cf0 \

\f0 \cf6         S += v[\cf10 i\cf6 ];
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  S/
\f2\b \cf5 double
\f0\b0 \cf6 (v.\cf10 size\cf6 ());
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  var(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  m = \cf11 mean\cf6 (v);
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  S = \cf8 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  i = \cf8 0\cf6 ; i<v.\cf10 size\cf6 (); i++) \{
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  y = (v[\cf10 i\cf6 ]-m);
\f1 \cf0 \

\f0 \cf6         S += y*y;
\f1 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  S/(
\f2\b \cf5 double
\f0\b0 \cf6 (v.\cf10 size\cf6 ())-\cf8 1.0\cf6 );
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\
\
}