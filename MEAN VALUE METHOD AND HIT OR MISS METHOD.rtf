{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red253\green143\blue63;\red31\green31\blue36;\red252\green106\blue93;
\red252\green95\blue163;\red255\green255\blue255;\red122\green200\blue182;\red108\green121\blue134;\red145\green212\blue98;
\red153\green232\blue213;\red150\green134\blue245;\red174\green243\blue125;}
{\*\expandedcolortbl;;\csgenericrgb\c99131\c56076\c24611;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c47716\c78607\c71403;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c56799\c83212\c38450;
\csgenericrgb\c59926\c90967\c83488;\csgenericrgb\c58752\c52717\c95948;\csgenericrgb\c68215\c95290\c48909;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 #include \cf4 <iostream>
\f1 \cf0 \

\f0 \cf2 #include \cf4 <vector>
\f1 \cf0 \

\f0 \cf2 #include \cf4 <random>
\f1 \cf0 \

\f0 \cf2 #include \cf4 <cmath>
\f1 \cf0 \

\f2\b \cf5 using
\f0\b0 \cf6  
\f2\b \cf5 namespace
\f0\b0 \cf6  \cf7 std\cf6 ;
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  sum(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v);
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  mean(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v);
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  var(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v);
\f1 \cf0 \
\

\f2\b \cf5 class
\f0\b0 \cf6  Uniform \{
\f1 \cf0 \

\f0 \cf6     \cf7 mt19937_64\cf6  mt; 
\f3\i \cf8 // prototyping seed for random number generator via mersenne twister
\f1\i0 \cf0 \

\f0 \cf6     \cf7 uniform_real_distribution\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 > u; 
\f3\i \cf8 // will give numbers from uniform real distribution prototype
\f1\i0 \cf0 \

\f2\b \cf5 public
\f0\b0 \cf6 :
\f1 \cf0 \

\f0 \cf6     Uniform(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 unsigned
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  s) : \cf9 mt\cf6 (\cf10 time\cf6 (\cf11 0\cf6 )) \{\} 
\f3\i \cf8 // constructor which allows us to set the vaklue of s later
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  
\f2\b \cf5 operator
\f0\b0 \cf6 ()() \{ 
\f3\i \cf8 //function which returns a function (random number from uniform real dist)
\f1\i0 \cf0 \

\f0 \cf6         
\f2\b \cf5 return
\f0\b0 \cf6  \cf9 u\cf6 (\cf10 mt\cf6 );
\f1 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6 \};
\f1 \cf0 \
\

\f0 \cf8 ///////////// HIT OR MISS //////////////////// CHECKS WHETHER A VALUE IS LESS THAN F(X) AND THEN COUNTS IF YES.
\f1 \cf0 \

\f0 \cf8 ///// INTEGRAL = AM/N where A = AREA OF THE SQUARE IN WHICH THE CURVE IS CONTAINED IN = height(b-a=width)
\f1 \cf0 \
\

\f2\b \cf5 template
\f0\b0 \cf6  <
\f2\b \cf5 typename
\f0\b0 \cf6  F>
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  hit_and_miss(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  a, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  b, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  c, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  N, F f, \cf9 Uniform\cf6 & u) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 int
\f0\b0 \cf6  M = \cf11 0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  i = \cf11 0\cf6 ; i<N; i++) \{
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x = a + (b - a)*u(); 
\f3\i \cf8 // will give some random point between a & b
\f1\i0 \cf0 \

\f0 \cf6         
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  w = c*u(); 
\f3\i \cf8 // will generate a random height between 0 and c
\f1\i0 \cf0 \

\f0 \cf6         
\f2\b \cf5 if
\f0\b0 \cf6  (w<f(x)) 
\f3\i \cf8 // asks the question if W is less than F(X) and IF it is counts it
\f1\i0 \cf0 \

\f0 \cf6             M++;
\f1 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  A = c*(b - a); 
\f3\i \cf8 //area of the square (height * width)
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  A*
\f2\b \cf5 double
\f0\b0 \cf6 (M) / 
\f2\b \cf5 double
\f0\b0 \cf6 (N);
\f3\i \cf8 // value of the integral //////// M/N approximately = I/A ... A is defined above. Just rearrange
\f1\i0 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f0 \cf8 ///////////// MEAN VALUE //////////////////// INTEGRAL = WIDTH X AVERAGE HEIGHT OF THE FUNCTION
\f1 \cf0 \
\

\f2\b \cf5 template
\f0\b0 \cf6  <
\f2\b \cf5 typename
\f0\b0 \cf6  F>
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  mean_value(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  a, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  b, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  N, F f, \cf9 Uniform\cf6 & u) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  S = \cf11 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  i = \cf11 0\cf6 ; i<N; i++) \{
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x = a + (b-a)*u(); 
\f3\i \cf8 // i.e this will give some random point between a & b
\f1\i0 \cf0 \

\f0 \cf6         S += f(x); 
\f3\i \cf8 // calculate sums of the heights
\f1\i0 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  (b - a)*S / 
\f2\b \cf5 double
\f0\b0 \cf6 (N); 
\f3\i \cf8 // width * average height = Integral
\f1\i0 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  f(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  x*x*(\cf11 1.0\cf6  - x)*(\cf11 1.0\cf6  - x);
\f1 \cf0 \

\f0 \cf6 \} 
\f3\i \cf8 // pdf given in the question that we are using to find f(x) and feed in random values for x
\f1\i0 \cf0 \
\

\f2\b \cf5 int
\f0\b0 \cf6  main() \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  seed = \cf11 51\cf6 ;
\f1 \cf0 \

\f0 \cf6     \cf9 Uniform\cf6  unif(seed); 
\f3\i \cf8 // set up random number generator for input
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  a = \cf11 0.0\cf6 ; 
\f3\i \cf8 // most left point
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  b = \cf11 1.0\cf6 ; 
\f3\i \cf8 // most right point
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  c = \cf11 1.0\cf6  / \cf11 16.0\cf6 ; 
\f3\i \cf8 // height of the box
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  m = \cf11 1000\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  N = \cf11 1000\cf6 ;
\f3\i \cf8 // number of times we want to carry out the test
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 > IH(m); 
\f3\i \cf8 // fill hit or miss vector with 1000 values
\f1\i0 \cf0 \

\f0 \cf6     \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 > IM(m); 
\f3\i \cf8 // fill mean value vector with 1000 values
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  j = \cf11 0\cf6 ; j < m; j++) \{
\f1 \cf0 \

\f0 \cf6         IH[\cf10 j\cf6 ] = \cf12 hit_and_miss\cf6 (a, b, c, N, \cf12 f\cf6 , unif); 
\f3\i \cf8 // we defined f above (pdf of the dist. we are trying to approximate integrals of)
\f1\i0 \cf0 \

\f0 \cf6         IM[\cf10 j\cf6 ] = \cf12 mean_value\cf6 (a, b, N, \cf12 f\cf6 , unif); 
\f3\i \cf8 // ********* KEY ******** WE ARE FILLING THE VECTORS WITH APPROXIMATIONS OF THE INTEGRAL
\f1\i0 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf4 "Hit and miss\\t"\cf6  << \cf12 var\cf6 (IH) << \cf10 endl\cf6 ;
\f1 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf4 "Mean value\\t"\cf6  << \cf12 var\cf6 (IM) << \cf10 endl\cf6 ; 
\f3\i \cf8 // is showing you how accurate each one is >> one of with the lowest variance is more accurate
\f1\i0 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf12 mean\cf6 (IH) << \cf10 endl\cf6 ; 
\f3\i \cf8 // outputs mean of 1000 approximations for the integral
\f1\i0 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf12 mean\cf6 (IM) << \cf10 endl\cf6 ; 
\f3\i \cf8 // outputs mean of 1000 approximations for the integral
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  value = \cf11 1.0\cf6 /\cf11 30.0\cf6 ; 
\f3\i \cf8 // actual value of integral
\f1\i0 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << value << \cf10 endl\cf6 ;
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  sum(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  S = \cf11 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  i = \cf11 0\cf6 ; i<v.\cf10 size\cf6 (); i++)
\f1 \cf0 \

\f0 \cf6         S += v[\cf10 i\cf6 ];
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  S;
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  mean(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  \cf12 sum\cf6 (v) / 
\f2\b \cf5 double
\f0\b0 \cf6 (v.\cf10 size\cf6 ());
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  var(
\f2\b \cf5 const
\f0\b0 \cf6  \cf7 vector\cf6 <
\f2\b \cf5 double
\f0\b0 \cf6 >& v) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  m = \cf12 mean\cf6 (v);
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  S = \cf11 0.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  i = \cf11 0\cf6 ; i<v.\cf10 size\cf6 (); i++) \{
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  y = (v[\cf10 i\cf6 ] - m);
\f1 \cf0 \

\f0 \cf6         S += y*y;
\f1 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  S / (
\f2\b \cf5 double
\f0\b0 \cf6 (v.\cf10 size\cf6 ()) - \cf11 1.0\cf6 );
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
}