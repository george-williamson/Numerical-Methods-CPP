{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red253\green143\blue63;\red31\green31\blue36;\red252\green106\blue93;
\red252\green95\blue163;\red255\green255\blue255;\red122\green200\blue182;\red108\green121\blue134;\red145\green212\blue98;
\red150\green134\blue245;\red153\green232\blue213;\red174\green243\blue125;}
{\*\expandedcolortbl;;\csgenericrgb\c99131\c56076\c24611;\csgenericrgb\c12054\c12284\c14131;\csgenericrgb\c98912\c41558\c36568;
\csgenericrgb\c98839\c37355\c63833;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c47716\c78607\c71403;\csgenericrgb\c42394\c47462\c52518;\csgenericrgb\c56799\c83212\c38450;
\csgenericrgb\c58752\c52717\c95948;\csgenericrgb\c59926\c90967\c83488;\csgenericrgb\c68215\c95290\c48909;}
\paperw11900\paperh16840\margl1440\margr1440\vieww24860\viewh15500\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 #include \cf4 <cmath>
\f1 \cf0 \

\f0 \cf2 #include \cf4 <iostream>
\f1 \cf0 \

\f0 \cf2 #include \cf4 <vector>
\f1 \cf0 \

\f2\b \cf5 using
\f0\b0 \cf6  
\f2\b \cf5 namespace
\f0\b0 \cf6  \cf7 std\cf6 ;
\f1 \cf0 \
\

\f2\b \cf5 struct
\f0\b0 \cf6  Norm_pdf\{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  mu; 
\f3\i \cf8 // prototype mu
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  sigma; 
\f3\i \cf8 // prototype sigma
\f1\i0 \cf0 \

\f0 \cf6     Norm_pdf() : \cf9 mu\cf6 (\cf10 0.0\cf6 ), \cf9 sigma\cf6 (\cf10 1.0\cf6 ) \{\} 
\f3\i \cf8 // constructor function to give default values for our normal distribution
\f1\i0 \cf0 \

\f0 \cf6     Norm_pdf(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  m, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  s) : \cf9 mu\cf6 (m), \cf9 sigma\cf6 (s) \{\} 
\f3\i \cf8 // prototyping function with member initialisation list with m&s arbitrary values (allows us to alter mu and sigma later)
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  
\f2\b \cf5 operator
\f0\b0 \cf6 ()(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x) \{ 
\f3\i \cf8 // an operator is a function that takes one or more functions as input and returns a function as output, we need this here because we are returning a function that calcs normal pdf
\f1\i0 \cf0 \

\f0 \cf6         
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  pi = \cf10 3.14159265358979\cf6 ;
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  z = (x-\cf9 mu\cf6 )/\cf9 sigma\cf6 ;
\f1 \cf0 \

\f0 \cf6         
\f2\b \cf5 return
\f0\b0 \cf6  \cf10 1.0\cf6 /(\cf11 sqrt\cf6 (\cf10 2.0\cf6 *pi)*\cf9 sigma\cf6 )*\cf11 exp\cf6 (-z*z/\cf10 2.0\cf6 ); 
\f3\i \cf8 // returning a function, we cant return a value as X is only know once its input
\f1\i0 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6 \};
\f1 \cf0 \
\

\f2\b \cf5 template
\f0\b0 \cf6  <
\f2\b \cf5 typename
\f0\b0 \cf6  F>
\f1 \cf0 \

\f2\b \cf5 double
\f0\b0 \cf6  trap_template(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  a, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  b, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  n, F f) \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  h = (b - a) / n; 
\f3\i \cf8 // width of strips
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  S = (f(a) + f(b)) / \cf10 2.0\cf6 ; 
\f3\i \cf8 // average height of the first and last parallel sides
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  k = \cf10 1\cf6 ; k<n; k++) \{
\f1 \cf0 \

\f0 \cf6         S += f(a + k*h); 
\f3\i \cf8 // getting heights of each strip
\f1\i0 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  I = S*h;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  I; 
\f3\i \cf8 // value of approximation via trapezium rule
\f1\i0 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  norm_pdf(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x) \{ 
\f3\i \cf8 // basic function to calculate the normal pdf
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  pi = \cf10 3.14159265358979\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  \cf10 1.0\cf6  / (\cf11 sqrt\cf6 (\cf10 2.0\cf6 *pi))*\cf11 exp\cf6 (-x*x / \cf10 2.0\cf6 );
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f2\b \cf5 double
\f0\b0 \cf6  trap_function(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  a, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  b, 
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 int
\f0\b0 \cf6  n, 
\f2\b \cf5 double
\f0\b0 \cf6  f(
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6 )) \{ 
\f3\i \cf8 // exactly the same function as above just isn't a template so cannot take arbitrary values like the one above
\f1\i0 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  h = (b - a) / n;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 double
\f0\b0 \cf6  S = (f(a) + f(b)) / \cf10 2.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 for
\f0\b0 \cf6  (
\f2\b \cf5 int
\f0\b0 \cf6  k = \cf10 1\cf6 ; k<n; k++) \{
\f1 \cf0 \

\f0 \cf6         S += f(a + k*h); 
\f3\i \cf8 // in addition to the initial 2 heights its adding up the height of each vertical line
\f1\i0 \cf0 \

\f0 \cf6     \}
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  I = S*h;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 return
\f0\b0 \cf6  I;
\f1 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
\

\f2\b \cf5 int
\f0\b0 \cf6  main() \{
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  x = \cf10 1.64\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f3\i \cf8 //function arguments ( first point x-coord, second point x-coord, number of strips, function that generates heights f(some x-coordinate)..
\f1\i0 \cf0 \

\f0 \cf6     
\f3\i \cf8 //.. which is made use of in the trap functions above
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf12 trap_function\cf6 (\cf10 0\cf6 , x, \cf10 20\cf6 , \cf12 norm_pdf\cf6 ) << \cf11 endl\cf6 ; 
\f3\i \cf8 // uses functions outside of the struct to calculate
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     \cf9 Norm_pdf\cf6  norm; 
\f3\i \cf8 //object to access struct
\f1\i0 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf12 trap_template\cf6 (\cf10 0\cf6 , x, \cf10 20\cf6 , norm) << \cf11 endl\cf6 ; 
\f3\i \cf8 // will run our template version with the struct function
\f1\i0 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf12 trap_template\cf6 (\cf10 0\cf6 , x, \cf10 20\cf6 , \cf12 norm_pdf\cf6 ) << \cf11 endl\cf6 ; 
\f3\i \cf8 // will run our template version with the free function
\f1\i0 \cf0 \

\f0 \cf6     
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  m1 = \cf10 2.0\cf6 ;
\f1 \cf0 \

\f0 \cf6     
\f2\b \cf5 const
\f0\b0 \cf6  
\f2\b \cf5 double
\f0\b0 \cf6  s1 = \cf10 1.5\cf6 ;
\f1 \cf0 \

\f0 \cf6     \cf9 Norm_pdf\cf6  norm1(m1, s1); 
\f3\i \cf8 // second object to change mu and sigma to new values
\f1\i0 \cf0 \

\f0 \cf6     \cf7 cout\cf6  << \cf12 trap_template\cf6 (-\cf10 10.0\cf6 , \cf10 2.0\cf6 , \cf10 20\cf6 , norm1) << \cf11 endl\cf6 ; 
\f3\i \cf8 // will use our struct to output values of f to generate heights
\f1\i0 \cf0 \

\f0 \cf6 \}
\f1 \cf0 \
}